name: Deploy to GCP

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to GCP Compute Engine
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Trigger instance update
        run: |
          gcloud compute instances add-metadata randomvalidator-instance \
            --zone=${{ secrets.GCP_ZONE }} \
            --metadata=deployment-trigger="$(date +%s)"

      - name: SSH and deploy
        run: |
          gcloud compute ssh randomvalidator-instance \
            --zone=${{ secrets.GCP_ZONE }} \
            --command="
              set -e

              # Create directory if it doesn't exist
              if [ ! -d /opt/randomvalidator ]; then
                echo 'Setting up /opt/randomvalidator for first time...'
                sudo mkdir -p /opt/randomvalidator
                sudo chown \$USER:\$USER /opt/randomvalidator
              fi

              # Clone or update repository
              if [ ! -d /opt/randomvalidator/.git ]; then
                echo 'Cloning repository...'
                git clone ${{ github.server_url }}/${{ github.repository }}.git /opt/randomvalidator
              else
                echo 'Updating repository...'
                cd /opt/randomvalidator
                git fetch origin
                git reset --hard origin/main
              fi

              # Build NIST test suite
              echo 'Building NIST test suite...'
              cd /opt/randomvalidator/nist/sts-2.1.2/sts-2.1.2
              make clean && make

              # Build Rust application
              cd /opt/randomvalidator
              source \$HOME/.cargo/env || curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
              source \$HOME/.cargo/env
              echo 'Building application...'
              cargo build --release --bin server

              # Restart service if it exists, otherwise just report success
              if sudo systemctl status randomvalidator >/dev/null 2>&1; then
                echo 'Restarting service...'
                sudo systemctl restart randomvalidator
              else
                echo 'Service not configured yet - binary built successfully at target/release/server'
              fi

              echo 'Deployment complete!'
            "

      - name: Setup Cloudflare Tunnel
        run: |
          # Copy setup script to instance (to home directory to avoid permission issues)
          gcloud compute scp setup-tunnel.sh randomvalidator-instance:~/setup-tunnel.sh --zone=${{ secrets.GCP_ZONE }}

          # Run setup script on instance (where it has correct IP for Cloudflare API)
          gcloud compute ssh randomvalidator-instance \
            --zone=${{ secrets.GCP_ZONE }} \
            --command="
              set -e
              chmod +x ~/setup-tunnel.sh
              ~/setup-tunnel.sh '${{ secrets.CLOUDFLARE_ACCOUNT_ID }}' '${{ secrets.CLOUDFLARE_API_TOKEN }}'
              rm ~/setup-tunnel.sh
            "

      - name: Configure DNS for Cloudflare Tunnel
        if: secrets.DOMAIN_NAME != ''
        run: |
          # Run DNS configuration from instance (where it has correct IP for Cloudflare API)
          gcloud compute ssh randomvalidator-instance \
            --zone=${{ secrets.GCP_ZONE }} \
            --command="
              set -e

              TUNNEL_NAME='randomvalidator-tunnel'
              DOMAIN_NAME='${{ secrets.DOMAIN_NAME }}'
              ACCOUNT_ID='${{ secrets.CLOUDFLARE_ACCOUNT_ID }}'
              API_TOKEN='${{ secrets.CLOUDFLARE_API_TOKEN }}'

              echo 'Configuring DNS for domain: \${DOMAIN_NAME}'

              # Get tunnel ID
              TUNNELS_RESPONSE=\$(curl -s -X GET \"https://api.cloudflare.com/client/v4/accounts/\${ACCOUNT_ID}/cfd_tunnel\" \
                -H \"Authorization: Bearer \${API_TOKEN}\" \
                -H \"Content-Type: application/json\")

              TUNNEL_ID=\$(echo \"\$TUNNELS_RESPONSE\" | jq -r \".result[]? | select(.name==\\\"\${TUNNEL_NAME}\\\") | .id // empty\")
              if [ -z \"\$TUNNEL_ID\" ]; then
                echo '‚ùå Error: Could not find tunnel \${TUNNEL_NAME}'
                echo 'Response: '\$TUNNELS_RESPONSE
                exit 1
              fi
              echo '‚úì Found tunnel: '\$TUNNEL_ID

              # Get zone ID
              ZONES_RESPONSE=\$(curl -s -X GET \"https://api.cloudflare.com/client/v4/zones?name=\${DOMAIN_NAME}\" \
                -H \"Authorization: Bearer \${API_TOKEN}\" \
                -H \"Content-Type: application/json\")

              ZONE_ID=\$(echo \"\$ZONES_RESPONSE\" | jq -r '.result[0].id // empty')
              if [ -z \"\$ZONE_ID\" ]; then
                echo '‚ùå Error: Domain \${DOMAIN_NAME} not found in your Cloudflare account'
                echo 'Make sure the domain is added to Cloudflare first'
                echo 'Response: '\$ZONES_RESPONSE | jq '.'
                exit 1
              fi
              echo '‚úì Found zone: '\$ZONE_ID

              # Check if DNS record exists
              RECORDS_RESPONSE=\$(curl -s -X GET \"https://api.cloudflare.com/client/v4/zones/\${ZONE_ID}/dns_records?type=CNAME&name=\${DOMAIN_NAME}\" \
                -H \"Authorization: Bearer \${API_TOKEN}\" \
                -H \"Content-Type: application/json\")

              RECORD_ID=\$(echo \"\$RECORDS_RESPONSE\" | jq -r '.result[0].id // empty')

              if [ -z \"\$RECORD_ID\" ]; then
                echo 'Creating DNS record...'
                CREATE_RESPONSE=\$(curl -s -X POST \"https://api.cloudflare.com/client/v4/zones/\${ZONE_ID}/dns_records\" \
                  -H \"Authorization: Bearer \${API_TOKEN}\" \
                  -H \"Content-Type: application/json\" \
                  --data \"{\\\"type\\\":\\\"CNAME\\\",\\\"name\\\":\\\"\${DOMAIN_NAME}\\\",\\\"content\\\":\\\"\${TUNNEL_ID}.cfargotunnel.com\\\",\\\"proxied\\\":true}\")

                if echo \"\$CREATE_RESPONSE\" | jq -e '.success == true' > /dev/null; then
                  echo '‚úì DNS record created successfully!'
                else
                  echo '‚ùå Error: Failed to create DNS record'
                  echo \"\$CREATE_RESPONSE\" | jq '.'
                  exit 1
                fi
              else
                echo '‚úì DNS record already exists'
              fi
            "

      - name: Verify deployment
        run: |
          INSTANCE_IP=$(gcloud compute instances describe randomvalidator-instance \
            --zone=${{ secrets.GCP_ZONE }} \
            --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          echo "‚úÖ Application deployed!"
          echo "üìç Direct IP access: http://$INSTANCE_IP:3000"

          # Wait for application to start
          echo "Waiting for application to start..."
          sleep 10

          # Verify application is running on direct IP
          if curl -f -s "http://$INSTANCE_IP:3000" > /dev/null; then
            echo "‚úì Application is responding on direct IP"
          else
            echo "‚ùå Error: Application is not responding on http://$INSTANCE_IP:3000"
            exit 1
          fi

          if [ -n "${{ secrets.DOMAIN_NAME }}" ]; then
            DOMAIN="${{ secrets.DOMAIN_NAME }}"
            echo ""
            echo "üåê Domain: https://$DOMAIN"
            echo "‚è≥ Waiting for DNS propagation and tunnel connection..."

            # Wait up to 60 seconds for domain to become accessible
            MAX_ATTEMPTS=12
            ATTEMPT=1
            while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
              echo "Attempt $ATTEMPT/$MAX_ATTEMPTS: Checking https://$DOMAIN..."

              if curl -f -s -m 5 "https://$DOMAIN" > /dev/null 2>&1; then
                echo "‚úÖ Domain is accessible at https://$DOMAIN"
                break
              fi

              if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
                echo "‚ùå Error: Domain https://$DOMAIN is not accessible after 60 seconds"
                echo "This could mean:"
                echo "  1. DNS has not propagated yet (can take up to 5 minutes)"
                echo "  2. Cloudflare tunnel is not running properly"
                echo "  3. Domain is not configured correctly in Cloudflare"
                echo ""
                echo "To debug, SSH to the instance and run:"
                echo "  sudo systemctl status cloudflared"
                echo "  sudo journalctl -u cloudflared -n 50"
                exit 1
              fi

              sleep 5
              ATTEMPT=$((ATTEMPT + 1))
            done
          else
            echo ""
            echo "üí° To enable custom domain with SSL:"
            echo "   1. Go to Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí Secrets"
            echo "   2. Add new repository secret: DOMAIN_NAME"
            echo "   3. Value: your-domain.com (must be added to your Cloudflare account)"
            echo "   4. Re-run this workflow"
          fi
