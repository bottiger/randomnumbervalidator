name: Deploy to GCP

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to GCP Compute Engine
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Trigger instance update
        run: |
          gcloud compute instances add-metadata randomvalidator-instance \
            --zone=${{ secrets.GCP_ZONE }} \
            --metadata=deployment-trigger="$(date +%s)"

      - name: SSH and deploy
        run: |
          gcloud compute ssh randomvalidator-instance \
            --zone=${{ secrets.GCP_ZONE }} \
            --command="
              set -e

              # Create directory if it doesn't exist
              if [ ! -d /opt/randomvalidator ]; then
                echo 'Setting up /opt/randomvalidator for first time...'
                sudo mkdir -p /opt/randomvalidator
                sudo chown \$USER:\$USER /opt/randomvalidator
              fi

              # Clone or update repository
              if [ ! -d /opt/randomvalidator/.git ]; then
                echo 'Cloning repository...'
                git clone ${{ github.server_url }}/${{ github.repository }}.git /opt/randomvalidator
              else
                echo 'Updating repository...'
                cd /opt/randomvalidator
                git fetch origin
                git reset --hard origin/main
              fi

              # Build NIST test suite
              echo 'Building NIST test suite...'
              cd /opt/randomvalidator/nist/sts-2.1.2/sts-2.1.2
              make clean && make

              # Build Rust application
              cd /opt/randomvalidator
              source \$HOME/.cargo/env || curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
              source \$HOME/.cargo/env
              echo 'Building application...'
              cargo build --release --bin server

              # Restart service if it exists, otherwise just report success
              if sudo systemctl status randomvalidator >/dev/null 2>&1; then
                echo 'Restarting service...'
                sudo systemctl restart randomvalidator
              else
                echo 'Service not configured yet - binary built successfully at target/release/server'
              fi

              echo 'Deployment complete!'
            "

      - name: Setup Cloudflare Tunnel
        run: |
          # Get or create tunnel
          echo "Getting/creating Cloudflare Tunnel..."

          TUNNEL_NAME="randomvalidator-tunnel"

          # Check if tunnel exists
          TUNNELS_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/cfd_tunnel" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json")

          # Check if API call succeeded
          if [ $? -ne 0 ]; then
            echo "Error: Failed to connect to Cloudflare API"
            exit 1
          fi

          # Check for API errors
          API_SUCCESS=$(echo "$TUNNELS_RESPONSE" | jq -r '.success // false')
          if [ "$API_SUCCESS" != "true" ]; then
            echo "Error: Cloudflare API returned an error"
            echo "$TUNNELS_RESPONSE" | jq -r '.errors[]?.message // "Unknown error"'
            exit 1
          fi

          TUNNEL_ID=$(echo "$TUNNELS_RESPONSE" | jq -r ".result[]? | select(.name==\"${TUNNEL_NAME}\") | .id // empty")

          if [ -z "$TUNNEL_ID" ]; then
            echo "Creating new tunnel..."
            RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/cfd_tunnel" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data "{\"name\":\"${TUNNEL_NAME}\",\"tunnel_secret\":\"$(openssl rand -base64 32)\"}")

            API_SUCCESS=$(echo "$RESPONSE" | jq -r '.success // false')
            if [ "$API_SUCCESS" != "true" ]; then
              echo "Error: Failed to create tunnel"
              echo "$RESPONSE" | jq -r '.errors[]?.message // "Unknown error"'
              exit 1
            fi

            TUNNEL_ID=$(echo "$RESPONSE" | jq -r '.result.id // empty')
            if [ -z "$TUNNEL_ID" ]; then
              echo "Error: No tunnel ID in response"
              exit 1
            fi
            echo "Created tunnel with ID: $TUNNEL_ID"
          else
            echo "Using existing tunnel: $TUNNEL_ID"
          fi

          # Get tunnel token
          TOKEN_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/cfd_tunnel/${TUNNEL_ID}/token" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json")

          API_SUCCESS=$(echo "$TOKEN_RESPONSE" | jq -r '.success // false')
          if [ "$API_SUCCESS" != "true" ]; then
            echo "Error: Failed to get tunnel token"
            echo "$TOKEN_RESPONSE" | jq -r '.errors[]?.message // "Unknown error"'
            exit 1
          fi

          TUNNEL_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.result // empty')
          if [ -z "$TUNNEL_TOKEN" ]; then
            echo "Error: No tunnel token in response"
            exit 1
          fi

          # Deploy to instance
          gcloud compute ssh randomvalidator-instance \
            --zone=${{ secrets.GCP_ZONE }} \
            --command="
              set -e

              # Install cloudflared if not present
              if ! command -v cloudflared &> /dev/null; then
                echo 'Installing cloudflared...'
                wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
                sudo dpkg -i cloudflared-linux-amd64.deb
                rm cloudflared-linux-amd64.deb
              fi

              # Create config directory
              sudo mkdir -p /etc/cloudflared

              # Write config file
              sudo tee /etc/cloudflared/config.yml > /dev/null << 'EOF'
              tunnel: ${TUNNEL_ID}
              credentials-file: /etc/cloudflared/credentials.json

              ingress:
                - service: http://localhost:3000
              EOF

              # Write tunnel token
              echo '${TUNNEL_TOKEN}' | sudo tee /etc/cloudflared/credentials.json > /dev/null

              # Install and start service
              sudo cloudflared service install
              sudo systemctl enable cloudflared
              sudo systemctl restart cloudflared

              echo 'Cloudflare Tunnel configured successfully!'
            "

      - name: Configure DNS for Cloudflare Tunnel
        if: vars.DOMAIN_NAME != ''
        run: |
          TUNNEL_NAME="randomvalidator-tunnel"

          # Get tunnel ID
          TUNNELS_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/cfd_tunnel" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json")

          API_SUCCESS=$(echo "$TUNNELS_RESPONSE" | jq -r '.success // false')
          if [ "$API_SUCCESS" != "true" ]; then
            echo "Error: Failed to get tunnel information"
            echo "$TUNNELS_RESPONSE" | jq -r '.errors[]?.message // "Unknown error"'
            exit 1
          fi

          TUNNEL_ID=$(echo "$TUNNELS_RESPONSE" | jq -r ".result[]? | select(.name==\"${TUNNEL_NAME}\") | .id // empty")
          if [ -z "$TUNNEL_ID" ]; then
            echo "Error: Could not find tunnel ${TUNNEL_NAME}"
            exit 1
          fi

          # Get zone ID for domain
          ZONES_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones?name=${{ vars.DOMAIN_NAME }}" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json")

          API_SUCCESS=$(echo "$ZONES_RESPONSE" | jq -r '.success // false')
          if [ "$API_SUCCESS" != "true" ]; then
            echo "Error: Failed to get zone information"
            echo "$ZONES_RESPONSE" | jq -r '.errors[]?.message // "Unknown error"'
            exit 1
          fi

          ZONE_ID=$(echo "$ZONES_RESPONSE" | jq -r '.result[0].id // empty')

          if [ -z "$ZONE_ID" ]; then
            echo "Warning: Could not find zone for domain ${{ vars.DOMAIN_NAME }}"
            echo "Please add DNS record manually in Cloudflare dashboard:"
            echo "  Type: CNAME"
            echo "  Name: @ (or subdomain)"
            echo "  Target: ${TUNNEL_ID}.cfargotunnel.com"
            echo "  Proxied: Yes (orange cloud)"
            exit 0
          fi

          # Check if DNS record exists
          RECORDS_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/dns_records?type=CNAME&name=${{ vars.DOMAIN_NAME }}" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json")

          API_SUCCESS=$(echo "$RECORDS_RESPONSE" | jq -r '.success // false')
          if [ "$API_SUCCESS" != "true" ]; then
            echo "Warning: Failed to check existing DNS records"
            echo "$RECORDS_RESPONSE" | jq -r '.errors[]?.message // "Unknown error"'
            RECORD_ID=""
          else
            RECORD_ID=$(echo "$RECORDS_RESPONSE" | jq -r '.result[0].id // empty')
          fi

          if [ -z "$RECORD_ID" ] || [ "$RECORD_ID" = "null" ]; then
            echo "Creating DNS record for ${{ vars.DOMAIN_NAME }}..."
            curl -X POST "https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/dns_records" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data "{
                \"type\": \"CNAME\",
                \"name\": \"${{ vars.DOMAIN_NAME }}\",
                \"content\": \"${TUNNEL_ID}.cfargotunnel.com\",
                \"proxied\": true
              }"
            echo "DNS record created!"
          else
            echo "DNS record already exists for ${{ vars.DOMAIN_NAME }}"
          fi

      - name: Verify deployment
        run: |
          INSTANCE_IP=$(gcloud compute instances describe randomvalidator-instance \
            --zone=${{ secrets.GCP_ZONE }} \
            --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          echo "✅ Application deployed!"
          echo "📍 Direct IP access: http://$INSTANCE_IP:3000"

          if [ -n "${{ vars.DOMAIN_NAME }}" ]; then
            echo "🌐 Domain access: https://${{ vars.DOMAIN_NAME }}"
            echo "⏳ DNS propagation may take a few minutes..."
          else
            echo "💡 To enable custom domain with SSL:"
            echo "   1. Go to Settings → Variables → New repository variable"
            echo "   2. Name: DOMAIN_NAME"
            echo "   3. Value: your-domain.com"
            echo "   4. Re-run this workflow"
          fi

          sleep 10
          curl -f "http://$INSTANCE_IP:3000" || echo "⚠️  Warning: Application may still be starting"
