name: Deploy to GCP

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to GCP Compute Engine
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Trigger instance update
        run: |
          gcloud compute instances add-metadata randomvalidator-instance \
            --zone=${{ secrets.GCP_ZONE }} \
            --metadata=deployment-trigger="$(date +%s)"

      - name: SSH and deploy
        run: |
          gcloud compute ssh randomvalidator-instance \
            --zone=${{ secrets.GCP_ZONE }} \
            --command="
              set -e

              # Create directory if it doesn't exist
              if [ ! -d /opt/randomvalidator ]; then
                echo 'Setting up /opt/randomvalidator for first time...'
                sudo mkdir -p /opt/randomvalidator
                sudo chown \$USER:\$USER /opt/randomvalidator
              fi

              # Clone or update repository
              if [ ! -d /opt/randomvalidator/.git ]; then
                echo 'Cloning repository...'
                git clone ${{ github.server_url }}/${{ github.repository }}.git /opt/randomvalidator
              else
                echo 'Updating repository...'
                cd /opt/randomvalidator
                git fetch origin
                git reset --hard origin/main
              fi

              # Build NIST test suite
              echo 'Building NIST test suite...'
              cd /opt/randomvalidator/nist/sts-2.1.2/sts-2.1.2
              make clean && make

              # Build Rust application
              cd /opt/randomvalidator
              source \$HOME/.cargo/env || curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
              source \$HOME/.cargo/env
              echo 'Building application...'
              cargo build --release --bin server

              # Restart service if it exists, otherwise just report success
              if sudo systemctl status randomvalidator >/dev/null 2>&1; then
                echo 'Restarting service...'
                sudo systemctl restart randomvalidator
              else
                echo 'Service not configured yet - binary built successfully at target/release/server'
              fi

              echo 'Deployment complete!'
            "

      - name: Setup Cloudflare Tunnel
        run: |
          # Copy setup script to instance
          gcloud compute scp setup-tunnel.sh randomvalidator-instance:/tmp/setup-tunnel.sh --zone=${{ secrets.GCP_ZONE }}

          # Run setup script on instance (where it has correct IP for Cloudflare API)
          gcloud compute ssh randomvalidator-instance \
            --zone=${{ secrets.GCP_ZONE }} \
            --command="
              set -e
              chmod +x /tmp/setup-tunnel.sh
              /tmp/setup-tunnel.sh '${{ secrets.CLOUDFLARE_ACCOUNT_ID }}' '${{ secrets.CLOUDFLARE_API_TOKEN }}'
              rm /tmp/setup-tunnel.sh
            "

      - name: Configure DNS for Cloudflare Tunnel
        if: vars.DOMAIN_NAME != ''
        run: |
          # Run DNS configuration from instance (where it has correct IP for Cloudflare API)
          gcloud compute ssh randomvalidator-instance \
            --zone=${{ secrets.GCP_ZONE }} \
            --command="
              set -e

              TUNNEL_NAME='randomvalidator-tunnel'
              DOMAIN_NAME='${{ vars.DOMAIN_NAME }}'
              ACCOUNT_ID='${{ secrets.CLOUDFLARE_ACCOUNT_ID }}'
              API_TOKEN='${{ secrets.CLOUDFLARE_API_TOKEN }}'

              # Get tunnel ID
              TUNNELS_RESPONSE=\$(curl -s -X GET \"https://api.cloudflare.com/client/v4/accounts/\${ACCOUNT_ID}/cfd_tunnel\" \
                -H \"Authorization: Bearer \${API_TOKEN}\" \
                -H \"Content-Type: application/json\")

              TUNNEL_ID=\$(echo \"\$TUNNELS_RESPONSE\" | jq -r \".result[]? | select(.name==\\\"\${TUNNEL_NAME}\\\") | .id // empty\")
              if [ -z \"\$TUNNEL_ID\" ]; then
                echo 'Error: Could not find tunnel'
                exit 1
              fi

              # Get zone ID
              ZONES_RESPONSE=\$(curl -s -X GET \"https://api.cloudflare.com/client/v4/zones?name=\${DOMAIN_NAME}\" \
                -H \"Authorization: Bearer \${API_TOKEN}\" \
                -H \"Content-Type: application/json\")

              ZONE_ID=\$(echo \"\$ZONES_RESPONSE\" | jq -r '.result[0].id // empty')
              if [ -z \"\$ZONE_ID\" ]; then
                echo 'Warning: Could not find zone for domain'
                exit 0
              fi

              # Check if DNS record exists
              RECORDS_RESPONSE=\$(curl -s -X GET \"https://api.cloudflare.com/client/v4/zones/\${ZONE_ID}/dns_records?type=CNAME&name=\${DOMAIN_NAME}\" \
                -H \"Authorization: Bearer \${API_TOKEN}\" \
                -H \"Content-Type: application/json\")

              RECORD_ID=\$(echo \"\$RECORDS_RESPONSE\" | jq -r '.result[0].id // empty')

              if [ -z \"\$RECORD_ID\" ]; then
                echo 'Creating DNS record...'
                curl -s -X POST \"https://api.cloudflare.com/client/v4/zones/\${ZONE_ID}/dns_records\" \
                  -H \"Authorization: Bearer \${API_TOKEN}\" \
                  -H \"Content-Type: application/json\" \
                  --data \"{\\\"type\\\":\\\"CNAME\\\",\\\"name\\\":\\\"\${DOMAIN_NAME}\\\",\\\"content\\\":\\\"\${TUNNEL_ID}.cfargotunnel.com\\\",\\\"proxied\\\":true}\"
                echo 'DNS record created!'
              else
                echo 'DNS record already exists'
              fi
            "

      - name: Verify deployment
        run: |
          INSTANCE_IP=$(gcloud compute instances describe randomvalidator-instance \
            --zone=${{ secrets.GCP_ZONE }} \
            --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          echo "‚úÖ Application deployed!"
          echo "üìç Direct IP access: http://$INSTANCE_IP:3000"

          if [ -n "${{ vars.DOMAIN_NAME }}" ]; then
            echo "üåê Domain access: https://${{ vars.DOMAIN_NAME }}"
            echo "‚è≥ DNS propagation may take a few minutes..."
          else
            echo "üí° To enable custom domain with SSL:"
            echo "   1. Go to Settings ‚Üí Variables ‚Üí New repository variable"
            echo "   2. Name: DOMAIN_NAME"
            echo "   3. Value: your-domain.com"
            echo "   4. Re-run this workflow"
          fi

          sleep 10
          curl -f "http://$INSTANCE_IP:3000" || echo "‚ö†Ô∏è  Warning: Application may still be starting"
